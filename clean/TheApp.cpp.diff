--- TheApp.cpp	2010-11-18 16:58:02.000000000 -0700
+++ ../~Docugate (DGC App Release 7.3)/TheApp.cpp	2011-11-26 08:28:31.000000000 -0700
@@ -3,7 +3,8 @@
 
 #include "stdafx.h"
 #include "TheApp.h"
-#include  "TimedThread.h"
+#include "ActivationTimer.h"
+
 
 #ifdef _DEBUG
 #define new DEBUG_NEW
@@ -11,6 +12,241 @@
 static char THIS_FILE[] = __FILE__;
 #endif
 
+////////////////////////////////////// 
+/////// Adding Timer function to re-scan Db. Added 8/29/2011 by Mike Young
+//////////////////////////////////////
+
+
+#define MAX_LOADSTRING 100
+
+// Global Variables:
+HINSTANCE hInst;								// current instance
+TCHAR szTitle[MAX_LOADSTRING];					// The title bar text
+TCHAR szWindowClass[MAX_LOADSTRING];			// The title bar text
+
+// Here are the timers:
+ActivationTimer timer;
+
+// Task 1:
+TCHAR* argv[1];
+void F1()
+{
+	int a = 0;
+	CMyDatabase      m_hMyDatabase;
+	CDatabase        m_hDatabase;
+    
+	m_gConnect.Format("Driver={SQL Server};Server=%s;Database=docugate;Uid=RTT;Pwd=Qwerty#1;Application=DGC_MCR",argv[1]);
+	m_hMyDatabase.ReadIni();
+	m_hMyDatabase.ReadStationsFromTable(m_hDatabase);
+    
+	for ( a = 0; a < 255; a++ )
+	{
+		strncpy(Stations[a].UnitValue,        m_hMyDatabase.m_UnitValue, 10);
+		Stations[a].UnitValueEnabled   = atoi(m_hMyDatabase.m_UnitValueEnabled);
+		Stations[a].UnitActive		   = 0;
+		Stations[a].UnitConnected	   = 0;
+	}
+	
+    
+	int StationCount = 0;
+	StationCount     = m_hMyDatabase.ReadStationsFromTable     (m_hDatabase);
+    
+	////////////////////////////////////////////////
+	// Get the CustomPL for each active unit
+	/////////////////////////////////////////////////
+	for ( a = 0; a < 255; a++ )
+	{
+        if (  Stations[a].UnitActive == 1)
+            m_hMyDatabase.GetStationCustomPL(Stations[a],m_hDatabase,0);
+	}
+}
+
+// Foward declarations of functions included in this code module:
+ATOM				MyRegisterClass(HINSTANCE hInstance);
+BOOL				InitInstance   (HINSTANCE, int);
+LRESULT CALLBACK	WndProc		   (HWND, UINT, WPARAM, LPARAM);
+LRESULT CALLBACK	About		   (HWND, UINT, WPARAM, LPARAM);
+
+int APIENTRY WinMain(HINSTANCE hInstance,
+                     HINSTANCE hPrevInstance,
+                     LPSTR     lpCmdLine,
+                     int       nCmdShow)
+{
+ 	// TODO: Place code here.
+	MSG msg;
+	HACCEL hAccelTable;
+    
+	// Initialize global strings
+	LoadString(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
+	LoadString(hInstance, IDC_ACTIVATIONTIMERDEMO, szWindowClass, MAX_LOADSTRING);
+	MyRegisterClass(hInstance);
+    
+	// Perform application initialization:
+	if (!InitInstance (hInstance, nCmdShow)) 
+	{
+		return FALSE;
+	}
+    
+	hAccelTable = LoadAccelerators(hInstance, (LPCTSTR)IDC_ACTIVATIONTIMERDEMO);
+    
+	// Main message loop:
+	while (GetMessage(&msg, NULL, 0, 0)) 
+	{
+		if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg)) 
+		{
+			TranslateMessage(&msg);
+			DispatchMessage(&msg);
+		}
+	}
+    
+	return msg.wParam;
+}
+
+
+
+//
+//  FUNCTION: MyRegisterClass()
+//
+//  PURPOSE: Registers the window class.
+//
+//  COMMENTS:
+//
+//    This function and its usage is only necessary if you want this code
+//    to be compatible with Win32 systems prior to the 'RegisterClassEx'
+//    function that was added to Windows 95. It is important to call this function
+//    so that the application will get 'well formed' small icons associated
+//    with it.
+//
+ATOM MyRegisterClass(HINSTANCE hInstance)
+{
+	WNDCLASSEX wcex;
+    
+	wcex.cbSize = sizeof(WNDCLASSEX); 
+    
+	wcex.style			= CS_HREDRAW | CS_VREDRAW;
+	wcex.lpfnWndProc	= (WNDPROC)WndProc;
+	wcex.cbClsExtra		= 0;
+	wcex.cbWndExtra		= 0;
+	wcex.hInstance		= hInstance;
+	wcex.hIcon			= LoadIcon(hInstance, (LPCTSTR)IDI_ACTIVATIONTIMERDEMO);
+	wcex.hCursor		= LoadCursor(NULL, IDC_ARROW);
+	wcex.hbrBackground	= (HBRUSH)(COLOR_WINDOW+1);
+	wcex.lpszMenuName	= (LPCSTR)IDC_ACTIVATIONTIMERDEMO;
+	wcex.lpszClassName	= szWindowClass;
+	wcex.hIconSm		= LoadIcon(wcex.hInstance, (LPCTSTR)IDI_SMALL);
+    
+	return RegisterClassEx(&wcex);
+}
+
+//
+//   FUNCTION: InitInstance(HANDLE, int)
+//
+//   PURPOSE: Saves instance handle and creates main window
+//
+//   COMMENTS:
+//
+//        In this function, we save the instance handle in a global variable and
+//        create and display the main program window.
+//
+BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
+{
+    HWND hWnd;
+    
+    hInst = hInstance; // Store instance handle in our global variable
+    
+    hWnd = CreateWindow(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
+                        CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, NULL, NULL, hInstance, NULL);
+    
+    if (!hWnd)
+    {
+        return FALSE;
+    }
+    
+    ShowWindow(hWnd, nCmdShow);
+    UpdateWindow(hWnd);
+    
+    // Here we add the tasks:
+    
+    // task...        will execute every....
+    
+    //   1                7.5 seconds.
+    
+	timer.AddTask(1000,  F1);
+    
+    return TRUE;
+}
+
+//
+//  FUNCTION: WndProc(HWND, unsigned, WORD, LONG)
+//
+//  PURPOSE:  Processes messages for the main window.
+//
+//  WM_COMMAND	- process the application menu
+//  WM_PAINT	- Paint the main window
+//  WM_DESTROY	- post a quit message and return
+//
+LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
+{
+	int wmId, wmEvent;
+	PAINTSTRUCT ps;
+	HDC hdc;
+	TCHAR szHello[MAX_LOADSTRING];
+	LoadString(hInst, IDS_HELLO, szHello, MAX_LOADSTRING);
+    
+	switch (message) 
+	{
+		case WM_COMMAND:
+			wmId    = LOWORD(wParam); 
+			wmEvent = HIWORD(wParam); 
+			// Parse the menu selections:
+			switch (wmId)
+        {
+            case IDM_ABOUT:
+                DialogBox(hInst, (LPCTSTR)IDD_ABOUTBOX, hWnd, (DLGPROC)About);
+                break;
+            case IDM_EXIT:
+                DestroyWindow(hWnd);
+                break;
+            default:
+                return DefWindowProc(hWnd, message, wParam, lParam);
+        }
+			break;
+		case WM_PAINT:
+			hdc = BeginPaint(hWnd, &ps);
+			// TODO: Add any drawing code here...
+			RECT rt;
+			GetClientRect(hWnd, &rt);
+			DrawText(hdc, szHello, strlen(szHello), &rt, DT_CENTER);
+			EndPaint(hWnd, &ps);
+			break;
+		case WM_DESTROY:
+			PostQuitMessage(0);
+			break;
+		default:
+			return DefWindowProc(hWnd, message, wParam, lParam);
+    }
+    return 0;
+}
+
+// Mesage handler for about box.
+LRESULT CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
+{
+	switch (message)
+	{
+		case WM_INITDIALOG:
+            return TRUE;
+            
+		case WM_COMMAND:
+			if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL) 
+			{
+				EndDialog(hDlg, LOWORD(wParam));
+				return TRUE;
+			}
+			break;
+	}
+    return FALSE;
+}
+
 /////////////////////////////////////////////////////////////////////////////
 // The one and only application object
 
@@ -68,7 +304,7 @@
 			nRetCode = 1;
 			return nRetCode;
 	}
-
+    void F1();
 
 	m_gConnect.Format("Driver={SQL Server};Server=%s;Database=docugate;Uid=RTT;Pwd=Qwerty#1;Application=DGC_MCR",argv[1]);
 
@@ -144,7 +380,6 @@
 		sprintf(_Message,"Main() Thread ID:%d;Database Closed",GetCurrentThreadId());
 		WriteLog( _Message, "");
 					
-	
 		////////////////////////////////////////////////
 		// start the worker threads for each control unit
 		/////////////////////////////////////////////////
@@ -174,8 +409,6 @@
 	    // now wait until we are terminated
 	    //////////////////////////////////
 	    WaitForSingleObject(hGlobalThreadWait, INFINITE);
-	    return nRetCode;
+		return nRetCode;
 }
 
-
-
